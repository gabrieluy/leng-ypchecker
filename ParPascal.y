-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParPascal where
import AbsPascal
import LexPascal
import ErrM

}

%name pProgram Program
%name pType Type
%name pVarPart VarPart
%name pVarDecl VarDecl
%name pListVarDecl ListVarDecl
%name pDef Def
%name pListDef ListDef
%name pParam Param
%name pListParam ListParam
%name pStm Stm
%name pListStm ListStm
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pListExp ListExp
%name pListIdent ListIdent
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  '-' { PT _ (TS _ 6) }
  '.' { PT _ (TS _ 7) }
  '/' { PT _ (TS _ 8) }
  ':' { PT _ (TS _ 9) }
  ':=' { PT _ (TS _ 10) }
  ';' { PT _ (TS _ 11) }
  '<' { PT _ (TS _ 12) }
  '<=' { PT _ (TS _ 13) }
  '<>' { PT _ (TS _ 14) }
  '=' { PT _ (TS _ 15) }
  '>' { PT _ (TS _ 16) }
  '>=' { PT _ (TS _ 17) }
  'and' { PT _ (TS _ 18) }
  'begin' { PT _ (TS _ 19) }
  'bool' { PT _ (TS _ 20) }
  'char' { PT _ (TS _ 21) }
  'div' { PT _ (TS _ 22) }
  'do' { PT _ (TS _ 23) }
  'else' { PT _ (TS _ 24) }
  'end' { PT _ (TS _ 25) }
  'false' { PT _ (TS _ 26) }
  'for' { PT _ (TS _ 27) }
  'function' { PT _ (TS _ 28) }
  'if' { PT _ (TS _ 29) }
  'integer' { PT _ (TS _ 30) }
  'mod' { PT _ (TS _ 31) }
  'not' { PT _ (TS _ 32) }
  'or' { PT _ (TS _ 33) }
  'procedure' { PT _ (TS _ 34) }
  'program' { PT _ (TS _ 35) }
  'real' { PT _ (TS _ 36) }
  'repeat' { PT _ (TS _ 37) }
  'string' { PT _ (TS _ 38) }
  'then' { PT _ (TS _ 39) }
  'to' { PT _ (TS _ 40) }
  'true' { PT _ (TS _ 41) }
  'until' { PT _ (TS _ 42) }
  'var' { PT _ (TS _ 43) }
  'while' { PT _ (TS _ 44) }

L_ident  { PT _ (TV $$) }
L_quoted { PT _ (TL $$) }
L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_charac { PT _ (TC $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
String  :: { String }  : L_quoted {  $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }

Program :: { Program }
Program : 'program' Ident ';' VarPart ListDef 'begin' ListStm 'end' '.' { AbsPascal.PBlock $2 $4 (reverse $5) $7 }
Type :: { Type }
Type : 'bool' { AbsPascal.Type_bool }
     | 'integer' { AbsPascal.Type_integer }
     | 'char' { AbsPascal.Type_char }
     | 'real' { AbsPascal.Type_real }
     | 'string' { AbsPascal.Type_string }
VarPart :: { VarPart }
VarPart : 'var' ListVarDecl { AbsPascal.VPart $2 }
        | {- empty -} { AbsPascal.VPartEmpty }
VarDecl :: { VarDecl }
VarDecl : ListIdent ':' Type { AbsPascal.VDecl $1 $3 }
ListVarDecl :: { [VarDecl] }
ListVarDecl : VarDecl ';' { (:[]) $1 }
            | VarDecl ';' ListVarDecl { (:) $1 $3 }
Def :: { Def }
Def : 'procedure' Ident '(' ListParam ')' ';' VarPart 'begin' ListStm 'end' { AbsPascal.DProc $2 $4 $7 $9 }
    | 'function' Ident '(' ListParam ')' ':' Type ';' VarPart 'begin' ListStm 'end' { AbsPascal.DFun $2 $4 $7 $9 $11 }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def ';' { flip (:) $1 $2 }
Param :: { Param }
Param : ListIdent ':' Type { AbsPascal.ParamSingle $1 $3 }
      | 'var' ListIdent ':' Type { AbsPascal.ParamRef $2 $4 }
ListParam :: { [Param] }
ListParam : {- empty -} { [] }
          | Param { (:[]) $1 }
          | Param ';' ListParam { (:) $1 $3 }
Stm :: { Stm }
Stm : Ident ':=' Exp { AbsPascal.SAss $1 $3 }
    | Ident '(' ListExp ')' { AbsPascal.SCall $1 $3 }
    | Ident { AbsPascal.SCallEmpty $1 }
    | 'repeat' Stm 'until' Exp { AbsPascal.SRepeat $2 $4 }
    | 'while' Exp 'do' Stm { AbsPascal.SWhile $2 $4 }
    | 'begin' ListStm 'end' { AbsPascal.SBlock $2 }
    | 'for' Ident ':=' Exp 'to' Exp 'do' Stm { AbsPascal.SFor $2 $4 $6 $8 }
    | 'if' Exp 'then' Stm 'else' Stm { AbsPascal.SIf $2 $4 $6 }
    | {- empty -} { AbsPascal.SEmpty }
ListStm :: { [Stm] }
ListStm : Stm { (:[]) $1 } | Stm ';' ListStm { (:) $1 $3 }
Exp :: { Exp }
Exp : Exp '=' Exp1 { AbsPascal.EEq $1 $3 }
    | Exp '<>' Exp1 { AbsPascal.EDiff $1 $3 }
    | Exp '<' Exp1 { AbsPascal.ELe $1 $3 }
    | Exp '<=' Exp1 { AbsPascal.ELeq $1 $3 }
    | Exp '>=' Exp1 { AbsPascal.EGeq $1 $3 }
    | Exp '>' Exp1 { AbsPascal.EGe $1 $3 }
    | Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp1 '+' Exp2 { AbsPascal.EPlus $1 $3 }
     | Exp1 '-' Exp2 { AbsPascal.ESubst $1 $3 }
     | Exp1 'or' Exp2 { AbsPascal.EOr $1 $3 }
     | Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '*' Exp3 { AbsPascal.EMul $1 $3 }
     | Exp2 '/' Exp3 { AbsPascal.EDiv $1 $3 }
     | Exp2 'and' Exp3 { AbsPascal.EAnd $1 $3 }
     | Exp2 'mod' Exp3 { AbsPascal.EMod $1 $3 }
     | Exp2 'div' Exp3 { AbsPascal.EDiv2 $1 $3 }
     | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Ident '(' ListExp ')' { AbsPascal.ECall $1 $3 }
     | Ident '(' ')' { AbsPascal.ECallEmpty $1 }
     | String { AbsPascal.EStr $1 }
     | Integer { AbsPascal.EInt $1 }
     | Double { AbsPascal.EReal $1 }
     | Char { AbsPascal.EChar $1 }
     | 'true' { AbsPascal.ETrue }
     | 'false' { AbsPascal.EFalse }
     | Ident { AbsPascal.EIdent $1 }
     | 'not' Exp3 { AbsPascal.ENot $2 }
     | '-' Exp3 { AbsPascal.ENegNum $2 }
     | '+' Exp3 { AbsPascal.EPlusNum $2 }
     | '(' Exp ')' { $2 }
ListExp :: { [Exp] }
ListExp : Exp { (:[]) $1 } | Exp ',' ListExp { (:) $1 $3 }
ListIdent :: { [Ident] }
ListIdent : Ident { (:[]) $1 } | Ident ',' ListIdent { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

