{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintPascal where

-- pretty-printer generated by the BNF converter

import AbsPascal
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])


instance Print Program where
  prt i e = case e of
    PBlock id varpart defs stms -> prPrec i 0 (concatD [doc (showString "program"), prt 0 id, doc (showString ";"), prt 0 varpart, prt 0 defs, doc (showString "begin"), prt 0 stms, doc (showString "end"), doc (showString ".")])

instance Print Type where
  prt i e = case e of
    Type_bool -> prPrec i 0 (concatD [doc (showString "bool")])
    Type_integer -> prPrec i 0 (concatD [doc (showString "integer")])
    Type_char -> prPrec i 0 (concatD [doc (showString "char")])
    Type_real -> prPrec i 0 (concatD [doc (showString "real")])
    Type_string -> prPrec i 0 (concatD [doc (showString "string")])

instance Print VarPart where
  prt i e = case e of
    VPart vardecls -> prPrec i 0 (concatD [doc (showString "var"), prt 0 vardecls])
    VPartEmpty -> prPrec i 0 (concatD [])

instance Print VarDecl where
  prt i e = case e of
    VDecl ids type_ -> prPrec i 0 (concatD [prt 0 ids, doc (showString ":"), prt 0 type_])
  prtList _ [x] = (concatD [prt 0 x, doc (showString ";")])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Def where
  prt i e = case e of
    DProc id params varpart stms -> prPrec i 0 (concatD [doc (showString "procedure"), prt 0 id, doc (showString "("), prt 0 params, doc (showString ")"), doc (showString ";"), prt 0 varpart, doc (showString "begin"), prt 0 stms, doc (showString "end")])
    DFun id params type_ varpart stms -> prPrec i 0 (concatD [doc (showString "function"), prt 0 id, doc (showString "("), prt 0 params, doc (showString ")"), doc (showString ":"), prt 0 type_, doc (showString ";"), prt 0 varpart, doc (showString "begin"), prt 0 stms, doc (showString "end")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Param where
  prt i e = case e of
    ParamSingle ids type_ -> prPrec i 0 (concatD [prt 0 ids, doc (showString ":"), prt 0 type_])
    ParamRef ids type_ -> prPrec i 0 (concatD [doc (showString "var"), prt 0 ids, doc (showString ":"), prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Stm where
  prt i e = case e of
    SAss id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString ":="), prt 0 exp])
    SCall id exps -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 exps, doc (showString ")")])
    SCallEmpty id -> prPrec i 0 (concatD [prt 0 id])
    SRepeat stm exp -> prPrec i 0 (concatD [doc (showString "repeat"), prt 0 stm, doc (showString "until"), prt 0 exp])
    SWhile exp stm -> prPrec i 0 (concatD [doc (showString "while"), prt 0 exp, doc (showString "do"), prt 0 stm])
    SBlock stms -> prPrec i 0 (concatD [doc (showString "begin"), prt 0 stms, doc (showString "end")])
    SFor id exp1 exp2 stm -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id, doc (showString ":="), prt 0 exp1, doc (showString "to"), prt 0 exp2, doc (showString "do"), prt 0 stm])
    SIf exp stm1 stm2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, doc (showString "then"), prt 0 stm1, doc (showString "else"), prt 0 stm2])
    SEmpty -> prPrec i 0 (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Exp where
  prt i e = case e of
    EEq exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "="), prt 1 exp2])
    EDiff exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "<>"), prt 1 exp2])
    ELe exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "<"), prt 1 exp2])
    ELeq exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "<="), prt 1 exp2])
    EGeq exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString ">="), prt 1 exp2])
    EGe exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString ">"), prt 1 exp2])
    EPlus exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "+"), prt 2 exp2])
    ESubst exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "-"), prt 2 exp2])
    EOr exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "or"), prt 2 exp2])
    EMul exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "*"), prt 3 exp2])
    EDiv exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "/"), prt 3 exp2])
    EAnd exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "and"), prt 3 exp2])
    EMod exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "mod"), prt 3 exp2])
    EDiv2 exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "div"), prt 3 exp2])
    ECall id exps -> prPrec i 3 (concatD [prt 0 id, doc (showString "("), prt 0 exps, doc (showString ")")])
    ECallEmpty id -> prPrec i 3 (concatD [prt 0 id, doc (showString "("), doc (showString ")")])
    EStr str -> prPrec i 3 (concatD [prt 0 str])
    EInt n -> prPrec i 3 (concatD [prt 0 n])
    EReal d -> prPrec i 3 (concatD [prt 0 d])
    EChar c -> prPrec i 3 (concatD [prt 0 c])
    ETrue -> prPrec i 3 (concatD [doc (showString "true")])
    EFalse -> prPrec i 3 (concatD [doc (showString "false")])
    EIdent id -> prPrec i 3 (concatD [prt 0 id])
    ENot exp -> prPrec i 3 (concatD [doc (showString "not"), prt 3 exp])
    ENegNum exp -> prPrec i 3 (concatD [doc (showString "-"), prt 3 exp])
    EPlusNum exp -> prPrec i 3 (concatD [doc (showString "+"), prt 3 exp])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

